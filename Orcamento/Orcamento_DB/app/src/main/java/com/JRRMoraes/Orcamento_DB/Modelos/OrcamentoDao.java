package com.JoaoMoraes.Modelos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.JoaoMoraes.Modelos.Orcamento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORCAMENTO.
*/
public class OrcamentoDao extends AbstractDao<Orcamento, Long> {

    public static final String TABLENAME = "ORCAMENTO";

    /**
     * Properties of entity Orcamento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IEvendedor = new Property(1, Long.class, "IEvendedor", false, "IEVENDEDOR");
        public final static Property IEcliente = new Property(2, Long.class, "IEcliente", false, "IECLIENTE");
        public final static Property IEprazo = new Property(3, Long.class, "IEprazo", false, "IEPRAZO");
        public final static Property Numero = new Property(4, String.class, "Numero", false, "NUMERO");
        public final static Property Situacao = new Property(5, Byte.class, "Situacao", false, "SITUACAO");
        public final static Property DataEmissao = new Property(6, java.util.Date.class, "DataEmissao", false, "DATA_EMISSAO");
        public final static Property ValorFlutuante = new Property(7, Double.class, "ValorFlutuante", false, "VALOR_FLUTUANTE");
        public final static Property AliquotaFlutuante = new Property(8, Double.class, "AliquotaFlutuante", false, "ALIQUOTA_FLUTUANTE");
        public final static Property FluxoFlutuante = new Property(9, Byte.class, "FluxoFlutuante", false, "FLUXO_FLUTUANTE");
        public final static Property ValorContabil = new Property(10, Double.class, "ValorContabil", false, "VALOR_CONTABIL");
        public final static Property ValorTotal = new Property(11, Double.class, "ValorTotal", false, "VALOR_TOTAL");
        public final static Property SituacaoEnvio = new Property(12, Byte.class, "SituacaoEnvio", false, "SITUACAO_ENVIO");
        public final static Property DataEnvio = new Property(13, java.util.Date.class, "DataEnvio", false, "DATA_ENVIO");
        public final static Property DataEdicao = new Property(14, java.util.Date.class, "DataEdicao", false, "DATA_EDICAO");
    };


    public OrcamentoDao(DaoConfig config) {
        super(config);
    }
    
    public OrcamentoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORCAMENTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'IEVENDEDOR' INTEGER," + // 1: IEvendedor
                "'IECLIENTE' INTEGER," + // 2: IEcliente
                "'IEPRAZO' INTEGER," + // 3: IEprazo
                "'NUMERO' TEXT," + // 4: Numero
                "'SITUACAO' INTEGER," + // 5: Situacao
                "'DATA_EMISSAO' INTEGER," + // 6: DataEmissao
                "'VALOR_FLUTUANTE' REAL," + // 7: ValorFlutuante
                "'ALIQUOTA_FLUTUANTE' REAL," + // 8: AliquotaFlutuante
                "'FLUXO_FLUTUANTE' INTEGER," + // 9: FluxoFlutuante
                "'VALOR_CONTABIL' REAL," + // 10: ValorContabil
                "'VALOR_TOTAL' REAL," + // 11: ValorTotal
                "'SITUACAO_ENVIO' INTEGER," + // 12: SituacaoEnvio
                "'DATA_ENVIO' INTEGER," + // 13: DataEnvio
                "'DATA_EDICAO' INTEGER);"); // 14: DataEdicao
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORCAMENTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Orcamento entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long IEvendedor = entity.getIEvendedor();
        if (IEvendedor != null) {
            stmt.bindLong(2, IEvendedor);
        }
 
        Long IEcliente = entity.getIEcliente();
        if (IEcliente != null) {
            stmt.bindLong(3, IEcliente);
        }
 
        Long IEprazo = entity.getIEprazo();
        if (IEprazo != null) {
            stmt.bindLong(4, IEprazo);
        }
 
        String Numero = entity.getNumero();
        if (Numero != null) {
            stmt.bindString(5, Numero);
        }
 
        Byte Situacao = entity.getSituacao();
        if (Situacao != null) {
            stmt.bindLong(6, Situacao);
        }
 
        java.util.Date DataEmissao = entity.getDataEmissao();
        if (DataEmissao != null) {
            stmt.bindLong(7, DataEmissao.getTime());
        }
 
        Double ValorFlutuante = entity.getValorFlutuante();
        if (ValorFlutuante != null) {
            stmt.bindDouble(8, ValorFlutuante);
        }
 
        Double AliquotaFlutuante = entity.getAliquotaFlutuante();
        if (AliquotaFlutuante != null) {
            stmt.bindDouble(9, AliquotaFlutuante);
        }
 
        Byte FluxoFlutuante = entity.getFluxoFlutuante();
        if (FluxoFlutuante != null) {
            stmt.bindLong(10, FluxoFlutuante);
        }
 
        Double ValorContabil = entity.getValorContabil();
        if (ValorContabil != null) {
            stmt.bindDouble(11, ValorContabil);
        }
 
        Double ValorTotal = entity.getValorTotal();
        if (ValorTotal != null) {
            stmt.bindDouble(12, ValorTotal);
        }
 
        Byte SituacaoEnvio = entity.getSituacaoEnvio();
        if (SituacaoEnvio != null) {
            stmt.bindLong(13, SituacaoEnvio);
        }
 
        java.util.Date DataEnvio = entity.getDataEnvio();
        if (DataEnvio != null) {
            stmt.bindLong(14, DataEnvio.getTime());
        }
 
        java.util.Date DataEdicao = entity.getDataEdicao();
        if (DataEdicao != null) {
            stmt.bindLong(15, DataEdicao.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Orcamento readEntity(Cursor cursor, int offset) {
        Orcamento entity = new Orcamento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // IEvendedor
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // IEcliente
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // IEprazo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Numero
            cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5), // Situacao
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // DataEmissao
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // ValorFlutuante
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // AliquotaFlutuante
            cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9), // FluxoFlutuante
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // ValorContabil
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // ValorTotal
            cursor.isNull(offset + 12) ? null : (byte) cursor.getShort(offset + 12), // SituacaoEnvio
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // DataEnvio
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)) // DataEdicao
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Orcamento entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIEvendedor(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIEcliente(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIEprazo(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNumero(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSituacao(cursor.isNull(offset + 5) ? null : (byte) cursor.getShort(offset + 5));
        entity.setDataEmissao(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setValorFlutuante(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setAliquotaFlutuante(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setFluxoFlutuante(cursor.isNull(offset + 9) ? null : (byte) cursor.getShort(offset + 9));
        entity.setValorContabil(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setValorTotal(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setSituacaoEnvio(cursor.isNull(offset + 12) ? null : (byte) cursor.getShort(offset + 12));
        entity.setDataEnvio(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setDataEdicao(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Orcamento entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Orcamento entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
